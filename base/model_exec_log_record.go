/*
 * ECPay API
 *
 * 綠界金流 API 定義文件
 *
 * API version: 0.0.17
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package base

import (
	"encoding/json"
)

// ExecLogRecord **每次授權明細**   每一次的授權紀錄。   例如，若已成功授權 3 次(TotalSuccessTimes 為 3)，則會顯示 3 筆授權紀錄。   欄位內容詳見下列定期定額授權明細之參數說明。
type ExecLogRecord struct {
	// **交易狀態**   回傳值為 1 時代表授權成功，其餘為失敗，失敗代碼請參考交易訊息代碼一覽
	RtnCode *int `json:"RtnCode,omitempty"`
	// **本次授權金額**  所授權的金額
	Amount *int `json:"amount,omitempty"`
	// **授權交易單號**  所授權的交易單號
	Gwsr *int `json:"gwsr,omitempty"`
	// **處理時間** 格式為 yyyy/MM/dd HH:mm:ss
	ProcessDate *ECPayDateTime `json:"process_date,omitempty"`
	// **授權碼** 授權碼
	AuthCode *string `json:"auth_code,omitempty"`
	// **綠界的交易編號** 請保存綠界的交易編號與特店交易編號 `MerchantTradeNo` 的關連。
	TradeNo *string `json:"TradeNo,omitempty"`
}

// NewExecLogRecord instantiates a new ExecLogRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecLogRecord() *ExecLogRecord {
	this := ExecLogRecord{}
	return &this
}

// NewExecLogRecordWithDefaults instantiates a new ExecLogRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecLogRecordWithDefaults() *ExecLogRecord {
	this := ExecLogRecord{}
	return &this
}

// GetRtnCode returns the RtnCode field value if set, zero value otherwise.
func (o *ExecLogRecord) GetRtnCode() int {
	if o == nil || o.RtnCode == nil {
		var ret int
		return ret
	}
	return *o.RtnCode
}

// GetRtnCodeOk returns a tuple with the RtnCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecLogRecord) GetRtnCodeOk() (*int, bool) {
	if o == nil || o.RtnCode == nil {
		return nil, false
	}
	return o.RtnCode, true
}

// HasRtnCode returns a boolean if a field has been set.
func (o *ExecLogRecord) HasRtnCode() bool {
	if o != nil && o.RtnCode != nil {
		return true
	}

	return false
}

// SetRtnCode gets a reference to the given int and assigns it to the RtnCode field.
func (o *ExecLogRecord) SetRtnCode(v int) {
	o.RtnCode = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *ExecLogRecord) GetAmount() int {
	if o == nil || o.Amount == nil {
		var ret int
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecLogRecord) GetAmountOk() (*int, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *ExecLogRecord) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int and assigns it to the Amount field.
func (o *ExecLogRecord) SetAmount(v int) {
	o.Amount = &v
}

// GetGwsr returns the Gwsr field value if set, zero value otherwise.
func (o *ExecLogRecord) GetGwsr() int {
	if o == nil || o.Gwsr == nil {
		var ret int
		return ret
	}
	return *o.Gwsr
}

// GetGwsrOk returns a tuple with the Gwsr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecLogRecord) GetGwsrOk() (*int, bool) {
	if o == nil || o.Gwsr == nil {
		return nil, false
	}
	return o.Gwsr, true
}

// HasGwsr returns a boolean if a field has been set.
func (o *ExecLogRecord) HasGwsr() bool {
	if o != nil && o.Gwsr != nil {
		return true
	}

	return false
}

// SetGwsr gets a reference to the given int and assigns it to the Gwsr field.
func (o *ExecLogRecord) SetGwsr(v int) {
	o.Gwsr = &v
}

// GetProcessDate returns the ProcessDate field value if set, zero value otherwise.
func (o *ExecLogRecord) GetProcessDate() ECPayDateTime {
	if o == nil || o.ProcessDate == nil {
		var ret ECPayDateTime
		return ret
	}
	return *o.ProcessDate
}

// GetProcessDateOk returns a tuple with the ProcessDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecLogRecord) GetProcessDateOk() (*ECPayDateTime, bool) {
	if o == nil || o.ProcessDate == nil {
		return nil, false
	}
	return o.ProcessDate, true
}

// HasProcessDate returns a boolean if a field has been set.
func (o *ExecLogRecord) HasProcessDate() bool {
	if o != nil && o.ProcessDate != nil {
		return true
	}

	return false
}

// SetProcessDate gets a reference to the given ECPayDateTime and assigns it to the ProcessDate field.
func (o *ExecLogRecord) SetProcessDate(v ECPayDateTime) {
	o.ProcessDate = &v
}

// GetAuthCode returns the AuthCode field value if set, zero value otherwise.
func (o *ExecLogRecord) GetAuthCode() string {
	if o == nil || o.AuthCode == nil {
		var ret string
		return ret
	}
	return *o.AuthCode
}

// GetAuthCodeOk returns a tuple with the AuthCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecLogRecord) GetAuthCodeOk() (*string, bool) {
	if o == nil || o.AuthCode == nil {
		return nil, false
	}
	return o.AuthCode, true
}

// HasAuthCode returns a boolean if a field has been set.
func (o *ExecLogRecord) HasAuthCode() bool {
	if o != nil && o.AuthCode != nil {
		return true
	}

	return false
}

// SetAuthCode gets a reference to the given string and assigns it to the AuthCode field.
func (o *ExecLogRecord) SetAuthCode(v string) {
	o.AuthCode = &v
}

// GetTradeNo returns the TradeNo field value if set, zero value otherwise.
func (o *ExecLogRecord) GetTradeNo() string {
	if o == nil || o.TradeNo == nil {
		var ret string
		return ret
	}
	return *o.TradeNo
}

// GetTradeNoOk returns a tuple with the TradeNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecLogRecord) GetTradeNoOk() (*string, bool) {
	if o == nil || o.TradeNo == nil {
		return nil, false
	}
	return o.TradeNo, true
}

// HasTradeNo returns a boolean if a field has been set.
func (o *ExecLogRecord) HasTradeNo() bool {
	if o != nil && o.TradeNo != nil {
		return true
	}

	return false
}

// SetTradeNo gets a reference to the given string and assigns it to the TradeNo field.
func (o *ExecLogRecord) SetTradeNo(v string) {
	o.TradeNo = &v
}

func (o ExecLogRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RtnCode != nil {
		toSerialize["RtnCode"] = o.RtnCode
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.Gwsr != nil {
		toSerialize["gwsr"] = o.Gwsr
	}
	if o.ProcessDate != nil {
		toSerialize["process_date"] = o.ProcessDate
	}
	if o.AuthCode != nil {
		toSerialize["auth_code"] = o.AuthCode
	}
	if o.TradeNo != nil {
		toSerialize["TradeNo"] = o.TradeNo
	}
	return json.Marshal(toSerialize)
}

type NullableExecLogRecord struct {
	value *ExecLogRecord
	isSet bool
}

func (v NullableExecLogRecord) Get() *ExecLogRecord {
	return v.value
}

func (v *NullableExecLogRecord) Set(val *ExecLogRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableExecLogRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableExecLogRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecLogRecord(val *ExecLogRecord) *NullableExecLogRecord {
	return &NullableExecLogRecord{value: val, isSet: true}
}

func (v NullableExecLogRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecLogRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
