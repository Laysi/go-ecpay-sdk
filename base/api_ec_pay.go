/*
 * ECPay API
 *
 * 綠界金流 API 定義文件
 *
 * API version: 0.0.17
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package base

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// ECPayApiService ECPayApi service
type ECPayApiService service

type apiCashierQueryCreditCardPeriodInfoPostRequest struct {
	ctx             _context.Context
	apiService      *ECPayApiService
	merchantID      *string
	merchantTradeNo *string
	timeStamp       *int
	checkMacValue   *string
}

func (r apiCashierQueryCreditCardPeriodInfoPostRequest) MerchantID(merchantID string) apiCashierQueryCreditCardPeriodInfoPostRequest {
	r.merchantID = &merchantID
	return r
}

func (r apiCashierQueryCreditCardPeriodInfoPostRequest) MerchantTradeNo(merchantTradeNo string) apiCashierQueryCreditCardPeriodInfoPostRequest {
	r.merchantTradeNo = &merchantTradeNo
	return r
}

func (r apiCashierQueryCreditCardPeriodInfoPostRequest) TimeStamp(timeStamp int) apiCashierQueryCreditCardPeriodInfoPostRequest {
	r.timeStamp = &timeStamp
	return r
}

func (r apiCashierQueryCreditCardPeriodInfoPostRequest) CheckMacValue(checkMacValue string) apiCashierQueryCreditCardPeriodInfoPostRequest {
	r.checkMacValue = &checkMacValue
	return r
}

/*
CashierQueryCreditCardPeriodInfoPost Method for CashierQueryCreditCardPeriodInfoPost
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return apiCashierQueryCreditCardPeriodInfoPostRequest
*/
func (a *ECPayApiService) CashierQueryCreditCardPeriodInfoPost(ctx _context.Context) apiCashierQueryCreditCardPeriodInfoPostRequest {
	return apiCashierQueryCreditCardPeriodInfoPostRequest{
		apiService: a,
		ctx:        ctx,
	}
}

/*
Execute executes the request
 @return CreditCardPeriodInfo
*/
func (r apiCashierQueryCreditCardPeriodInfoPostRequest) Execute() (CreditCardPeriodInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CreditCardPeriodInfo
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "ECPayApiService.CashierQueryCreditCardPeriodInfoPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Cashier/QueryCreditCardPeriodInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.merchantID == nil {
		return localVarReturnValue, nil, reportError("merchantID is required and must be specified")
	}
	if strlen(*r.merchantID) > 10 {
		return localVarReturnValue, nil, reportError("merchantID must have less than 10 elements")
	}

	if r.merchantTradeNo == nil {
		return localVarReturnValue, nil, reportError("merchantTradeNo is required and must be specified")
	}
	if strlen(*r.merchantTradeNo) > 20 {
		return localVarReturnValue, nil, reportError("merchantTradeNo must have less than 20 elements")
	}

	if r.timeStamp == nil {
		return localVarReturnValue, nil, reportError("timeStamp is required and must be specified")
	}
	if *r.timeStamp < 0 {
		return localVarReturnValue, nil, reportError("timeStamp must be greater than 0")
	}

	if r.checkMacValue == nil {
		return localVarReturnValue, nil, reportError("checkMacValue is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("MerchantID", parameterToString(*r.merchantID, ""))
	localVarFormParams.Add("MerchantTradeNo", parameterToString(*r.merchantTradeNo, ""))
	localVarFormParams.Add("TimeStamp", parameterToString(*r.timeStamp, ""))
	localVarFormParams.Add("CheckMacValue", parameterToString(*r.checkMacValue, ""))
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
