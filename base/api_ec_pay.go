/*
 * ECPay API
 *
 * 綠界金流 API 定義文件
 *
 * API version: 0.0.8
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package base

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// ECPayApiService ECPayApi service
type ECPayApiService service

type apiAioCheckOutRequest struct {
	ctx                _context.Context
	apiService         *ECPayApiService
	merchantID         *string
	merchantTradeNo    *string
	merchantTradeDate  *ECPayDateTime
	paymentType        *AioCheckPaymentTypeEnum
	totalAmount        *int32
	tradeDesc          *string
	itemName           *string
	returnURL          *string
	choosePayment      *ChoosePaymentEnum
	checkMacValue      *string
	encryptType        *EncryptTypeEnum
	storeID            *string
	clientBackURL      *string
	itemURL            *string
	remark             *string
	chooseSubPayment   *string
	orderResultURL     *string
	needExtraPaidInfo  *NeedExtraPaidInfoEnum
	deviceSource       *string
	ignorePayment      *string
	platformID         *string
	invoiceMark        *InvoiceMarkEnum
	customField1       *string
	customField2       *string
	customField3       *string
	customField4       *string
	language           *LanguageEnum
	storeExpireDate    *int32
	desc1              *string
	desc2              *string
	desc3              *string
	desc4              *string
	paymentInfoURL     *string
	clientRedirectURL  *string
	bindingCard        *BindingCardEnum
	merchantMemberID   *string
	redeem             *RedeemEnum
	unionPay           *UnionPayEnum
	creditInstallment  *string
	periodAmount       *int32
	periodType         *CreditPeriodTypeEnum
	frequency          *int32
	execTimes          *int32
	periodReturnURL    *string
	relateNumber       *string
	customerID         *string
	customerIdentifier *string
	customerName       *string
	customerAddr       *string
	customerPhone      *string
	customerEmail      *string
	clearanceMark      *ClearanceMarkEnum
	taxType            *TaxTypeEnum
	carruerType        *CarruerTypeEnum
	carruerNum         *string
	donation           *InvoiceDonationEunm
	loveCode           *string
	print              *InvoicePrintEnum
	invoiceItemName    *string
	invoiceItemCount   *string
	invoiceItemWord    *string
	invoiceItemPrice   *string
	invoiceItemTaxType *string
	invoiceRemark      *string
	delayDay           *string
	invType            *string
}

func (r apiAioCheckOutRequest) MerchantID(merchantID string) apiAioCheckOutRequest {
	r.merchantID = &merchantID
	return r
}

func (r apiAioCheckOutRequest) MerchantTradeNo(merchantTradeNo string) apiAioCheckOutRequest {
	r.merchantTradeNo = &merchantTradeNo
	return r
}

func (r apiAioCheckOutRequest) MerchantTradeDate(merchantTradeDate ECPayDateTime) apiAioCheckOutRequest {
	r.merchantTradeDate = &merchantTradeDate
	return r
}

func (r apiAioCheckOutRequest) PaymentType(paymentType AioCheckPaymentTypeEnum) apiAioCheckOutRequest {
	r.paymentType = &paymentType
	return r
}

func (r apiAioCheckOutRequest) TotalAmount(totalAmount int32) apiAioCheckOutRequest {
	r.totalAmount = &totalAmount
	return r
}

func (r apiAioCheckOutRequest) TradeDesc(tradeDesc string) apiAioCheckOutRequest {
	r.tradeDesc = &tradeDesc
	return r
}

func (r apiAioCheckOutRequest) ItemName(itemName string) apiAioCheckOutRequest {
	r.itemName = &itemName
	return r
}

func (r apiAioCheckOutRequest) ReturnURL(returnURL string) apiAioCheckOutRequest {
	r.returnURL = &returnURL
	return r
}

func (r apiAioCheckOutRequest) ChoosePayment(choosePayment ChoosePaymentEnum) apiAioCheckOutRequest {
	r.choosePayment = &choosePayment
	return r
}

func (r apiAioCheckOutRequest) CheckMacValue(checkMacValue string) apiAioCheckOutRequest {
	r.checkMacValue = &checkMacValue
	return r
}

func (r apiAioCheckOutRequest) EncryptType(encryptType EncryptTypeEnum) apiAioCheckOutRequest {
	r.encryptType = &encryptType
	return r
}

func (r apiAioCheckOutRequest) StoreID(storeID string) apiAioCheckOutRequest {
	r.storeID = &storeID
	return r
}

func (r apiAioCheckOutRequest) ClientBackURL(clientBackURL string) apiAioCheckOutRequest {
	r.clientBackURL = &clientBackURL
	return r
}

func (r apiAioCheckOutRequest) ItemURL(itemURL string) apiAioCheckOutRequest {
	r.itemURL = &itemURL
	return r
}

func (r apiAioCheckOutRequest) Remark(remark string) apiAioCheckOutRequest {
	r.remark = &remark
	return r
}

func (r apiAioCheckOutRequest) ChooseSubPayment(chooseSubPayment string) apiAioCheckOutRequest {
	r.chooseSubPayment = &chooseSubPayment
	return r
}

func (r apiAioCheckOutRequest) OrderResultURL(orderResultURL string) apiAioCheckOutRequest {
	r.orderResultURL = &orderResultURL
	return r
}

func (r apiAioCheckOutRequest) NeedExtraPaidInfo(needExtraPaidInfo NeedExtraPaidInfoEnum) apiAioCheckOutRequest {
	r.needExtraPaidInfo = &needExtraPaidInfo
	return r
}

func (r apiAioCheckOutRequest) DeviceSource(deviceSource string) apiAioCheckOutRequest {
	r.deviceSource = &deviceSource
	return r
}

func (r apiAioCheckOutRequest) IgnorePayment(ignorePayment string) apiAioCheckOutRequest {
	r.ignorePayment = &ignorePayment
	return r
}

func (r apiAioCheckOutRequest) PlatformID(platformID string) apiAioCheckOutRequest {
	r.platformID = &platformID
	return r
}

func (r apiAioCheckOutRequest) InvoiceMark(invoiceMark InvoiceMarkEnum) apiAioCheckOutRequest {
	r.invoiceMark = &invoiceMark
	return r
}

func (r apiAioCheckOutRequest) CustomField1(customField1 string) apiAioCheckOutRequest {
	r.customField1 = &customField1
	return r
}

func (r apiAioCheckOutRequest) CustomField2(customField2 string) apiAioCheckOutRequest {
	r.customField2 = &customField2
	return r
}

func (r apiAioCheckOutRequest) CustomField3(customField3 string) apiAioCheckOutRequest {
	r.customField3 = &customField3
	return r
}

func (r apiAioCheckOutRequest) CustomField4(customField4 string) apiAioCheckOutRequest {
	r.customField4 = &customField4
	return r
}

func (r apiAioCheckOutRequest) Language(language LanguageEnum) apiAioCheckOutRequest {
	r.language = &language
	return r
}

func (r apiAioCheckOutRequest) StoreExpireDate(storeExpireDate int32) apiAioCheckOutRequest {
	r.storeExpireDate = &storeExpireDate
	return r
}

func (r apiAioCheckOutRequest) Desc1(desc1 string) apiAioCheckOutRequest {
	r.desc1 = &desc1
	return r
}

func (r apiAioCheckOutRequest) Desc2(desc2 string) apiAioCheckOutRequest {
	r.desc2 = &desc2
	return r
}

func (r apiAioCheckOutRequest) Desc3(desc3 string) apiAioCheckOutRequest {
	r.desc3 = &desc3
	return r
}

func (r apiAioCheckOutRequest) Desc4(desc4 string) apiAioCheckOutRequest {
	r.desc4 = &desc4
	return r
}

func (r apiAioCheckOutRequest) PaymentInfoURL(paymentInfoURL string) apiAioCheckOutRequest {
	r.paymentInfoURL = &paymentInfoURL
	return r
}

func (r apiAioCheckOutRequest) ClientRedirectURL(clientRedirectURL string) apiAioCheckOutRequest {
	r.clientRedirectURL = &clientRedirectURL
	return r
}

func (r apiAioCheckOutRequest) BindingCard(bindingCard BindingCardEnum) apiAioCheckOutRequest {
	r.bindingCard = &bindingCard
	return r
}

func (r apiAioCheckOutRequest) MerchantMemberID(merchantMemberID string) apiAioCheckOutRequest {
	r.merchantMemberID = &merchantMemberID
	return r
}

func (r apiAioCheckOutRequest) Redeem(redeem RedeemEnum) apiAioCheckOutRequest {
	r.redeem = &redeem
	return r
}

func (r apiAioCheckOutRequest) UnionPay(unionPay UnionPayEnum) apiAioCheckOutRequest {
	r.unionPay = &unionPay
	return r
}

func (r apiAioCheckOutRequest) CreditInstallment(creditInstallment string) apiAioCheckOutRequest {
	r.creditInstallment = &creditInstallment
	return r
}

func (r apiAioCheckOutRequest) PeriodAmount(periodAmount int32) apiAioCheckOutRequest {
	r.periodAmount = &periodAmount
	return r
}

func (r apiAioCheckOutRequest) PeriodType(periodType CreditPeriodTypeEnum) apiAioCheckOutRequest {
	r.periodType = &periodType
	return r
}

func (r apiAioCheckOutRequest) Frequency(frequency int32) apiAioCheckOutRequest {
	r.frequency = &frequency
	return r
}

func (r apiAioCheckOutRequest) ExecTimes(execTimes int32) apiAioCheckOutRequest {
	r.execTimes = &execTimes
	return r
}

func (r apiAioCheckOutRequest) PeriodReturnURL(periodReturnURL string) apiAioCheckOutRequest {
	r.periodReturnURL = &periodReturnURL
	return r
}

func (r apiAioCheckOutRequest) RelateNumber(relateNumber string) apiAioCheckOutRequest {
	r.relateNumber = &relateNumber
	return r
}

func (r apiAioCheckOutRequest) CustomerID(customerID string) apiAioCheckOutRequest {
	r.customerID = &customerID
	return r
}

func (r apiAioCheckOutRequest) CustomerIdentifier(customerIdentifier string) apiAioCheckOutRequest {
	r.customerIdentifier = &customerIdentifier
	return r
}

func (r apiAioCheckOutRequest) CustomerName(customerName string) apiAioCheckOutRequest {
	r.customerName = &customerName
	return r
}

func (r apiAioCheckOutRequest) CustomerAddr(customerAddr string) apiAioCheckOutRequest {
	r.customerAddr = &customerAddr
	return r
}

func (r apiAioCheckOutRequest) CustomerPhone(customerPhone string) apiAioCheckOutRequest {
	r.customerPhone = &customerPhone
	return r
}

func (r apiAioCheckOutRequest) CustomerEmail(customerEmail string) apiAioCheckOutRequest {
	r.customerEmail = &customerEmail
	return r
}

func (r apiAioCheckOutRequest) ClearanceMark(clearanceMark ClearanceMarkEnum) apiAioCheckOutRequest {
	r.clearanceMark = &clearanceMark
	return r
}

func (r apiAioCheckOutRequest) TaxType(taxType TaxTypeEnum) apiAioCheckOutRequest {
	r.taxType = &taxType
	return r
}

func (r apiAioCheckOutRequest) CarruerType(carruerType CarruerTypeEnum) apiAioCheckOutRequest {
	r.carruerType = &carruerType
	return r
}

func (r apiAioCheckOutRequest) CarruerNum(carruerNum string) apiAioCheckOutRequest {
	r.carruerNum = &carruerNum
	return r
}

func (r apiAioCheckOutRequest) Donation(donation InvoiceDonationEunm) apiAioCheckOutRequest {
	r.donation = &donation
	return r
}

func (r apiAioCheckOutRequest) LoveCode(loveCode string) apiAioCheckOutRequest {
	r.loveCode = &loveCode
	return r
}

func (r apiAioCheckOutRequest) Print(print InvoicePrintEnum) apiAioCheckOutRequest {
	r.print = &print
	return r
}

func (r apiAioCheckOutRequest) InvoiceItemName(invoiceItemName string) apiAioCheckOutRequest {
	r.invoiceItemName = &invoiceItemName
	return r
}

func (r apiAioCheckOutRequest) InvoiceItemCount(invoiceItemCount string) apiAioCheckOutRequest {
	r.invoiceItemCount = &invoiceItemCount
	return r
}

func (r apiAioCheckOutRequest) InvoiceItemWord(invoiceItemWord string) apiAioCheckOutRequest {
	r.invoiceItemWord = &invoiceItemWord
	return r
}

func (r apiAioCheckOutRequest) InvoiceItemPrice(invoiceItemPrice string) apiAioCheckOutRequest {
	r.invoiceItemPrice = &invoiceItemPrice
	return r
}

func (r apiAioCheckOutRequest) InvoiceItemTaxType(invoiceItemTaxType string) apiAioCheckOutRequest {
	r.invoiceItemTaxType = &invoiceItemTaxType
	return r
}

func (r apiAioCheckOutRequest) InvoiceRemark(invoiceRemark string) apiAioCheckOutRequest {
	r.invoiceRemark = &invoiceRemark
	return r
}

func (r apiAioCheckOutRequest) DelayDay(delayDay string) apiAioCheckOutRequest {
	r.delayDay = &delayDay
	return r
}

func (r apiAioCheckOutRequest) InvType(invType string) apiAioCheckOutRequest {
	r.invType = &invType
	return r
}

/*
AioCheckOut Method for AioCheckOut
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return apiAioCheckOutRequest
*/
func (a *ECPayApiService) AioCheckOut(ctx _context.Context) apiAioCheckOutRequest {
	return apiAioCheckOutRequest{
		apiService: a,
		ctx:        ctx,
	}
}

/*
Execute executes the request

*/
func (r apiAioCheckOutRequest) Execute() (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "ECPayApiService.AioCheckOut")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Cashier/AioCheckOut/V5"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.merchantID == nil {
		return nil, reportError("merchantID is required and must be specified")
	}
	if strlen(*r.merchantID) > 10 {
		return nil, reportError("merchantID must have less than 10 elements")
	}

	if r.merchantTradeNo == nil {
		return nil, reportError("merchantTradeNo is required and must be specified")
	}
	if strlen(*r.merchantTradeNo) > 20 {
		return nil, reportError("merchantTradeNo must have less than 20 elements")
	}

	if r.merchantTradeDate == nil {
		return nil, reportError("merchantTradeDate is required and must be specified")
	}

	if r.paymentType == nil {
		return nil, reportError("paymentType is required and must be specified")
	}

	if r.totalAmount == nil {
		return nil, reportError("totalAmount is required and must be specified")
	}
	if *r.totalAmount < 0 {
		return nil, reportError("totalAmount must be greater than 0")
	}

	if r.tradeDesc == nil {
		return nil, reportError("tradeDesc is required and must be specified")
	}
	if strlen(*r.tradeDesc) > 200 {
		return nil, reportError("tradeDesc must have less than 200 elements")
	}

	if r.itemName == nil {
		return nil, reportError("itemName is required and must be specified")
	}
	if strlen(*r.itemName) > 400 {
		return nil, reportError("itemName must have less than 400 elements")
	}

	if r.returnURL == nil {
		return nil, reportError("returnURL is required and must be specified")
	}
	if strlen(*r.returnURL) > 200 {
		return nil, reportError("returnURL must have less than 200 elements")
	}

	if r.choosePayment == nil {
		return nil, reportError("choosePayment is required and must be specified")
	}

	if r.checkMacValue == nil {
		return nil, reportError("checkMacValue is required and must be specified")
	}

	if r.encryptType == nil {
		return nil, reportError("encryptType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("MerchantID", parameterToString(*r.merchantID, ""))
	localVarFormParams.Add("MerchantTradeNo", parameterToString(*r.merchantTradeNo, ""))
	if r.storeID != nil {
		localVarFormParams.Add("StoreID", parameterToString(*r.storeID, ""))
	}
	localVarFormParams.Add("MerchantTradeDate", parameterToString(*r.merchantTradeDate, ""))
	localVarFormParams.Add("PaymentType", parameterToString(*r.paymentType, ""))
	localVarFormParams.Add("TotalAmount", parameterToString(*r.totalAmount, ""))
	localVarFormParams.Add("TradeDesc", parameterToString(*r.tradeDesc, ""))
	localVarFormParams.Add("ItemName", parameterToString(*r.itemName, ""))
	localVarFormParams.Add("ReturnURL", parameterToString(*r.returnURL, ""))
	localVarFormParams.Add("ChoosePayment", parameterToString(*r.choosePayment, ""))
	localVarFormParams.Add("CheckMacValue", parameterToString(*r.checkMacValue, ""))
	if r.clientBackURL != nil {
		localVarFormParams.Add("ClientBackURL", parameterToString(*r.clientBackURL, ""))
	}
	if r.itemURL != nil {
		localVarFormParams.Add("ItemURL", parameterToString(*r.itemURL, ""))
	}
	if r.remark != nil {
		localVarFormParams.Add("Remark", parameterToString(*r.remark, ""))
	}
	if r.chooseSubPayment != nil {
		localVarFormParams.Add("ChooseSubPayment", parameterToString(*r.chooseSubPayment, ""))
	}
	if r.orderResultURL != nil {
		localVarFormParams.Add("OrderResultURL", parameterToString(*r.orderResultURL, ""))
	}
	if r.needExtraPaidInfo != nil {
		localVarFormParams.Add("NeedExtraPaidInfo", parameterToString(*r.needExtraPaidInfo, ""))
	}
	if r.deviceSource != nil {
		localVarFormParams.Add("DeviceSource", parameterToString(*r.deviceSource, ""))
	}
	if r.ignorePayment != nil {
		localVarFormParams.Add("IgnorePayment", parameterToString(*r.ignorePayment, ""))
	}
	if r.platformID != nil {
		localVarFormParams.Add("PlatformID", parameterToString(*r.platformID, ""))
	}
	if r.invoiceMark != nil {
		localVarFormParams.Add("InvoiceMark", parameterToString(*r.invoiceMark, ""))
	}
	if r.customField1 != nil {
		localVarFormParams.Add("CustomField1", parameterToString(*r.customField1, ""))
	}
	if r.customField2 != nil {
		localVarFormParams.Add("CustomField2", parameterToString(*r.customField2, ""))
	}
	if r.customField3 != nil {
		localVarFormParams.Add("CustomField3", parameterToString(*r.customField3, ""))
	}
	if r.customField4 != nil {
		localVarFormParams.Add("CustomField4", parameterToString(*r.customField4, ""))
	}
	localVarFormParams.Add("EncryptType", parameterToString(*r.encryptType, ""))
	if r.language != nil {
		localVarFormParams.Add("Language", parameterToString(*r.language, ""))
	}
	if r.storeExpireDate != nil {
		localVarFormParams.Add("StoreExpireDate", parameterToString(*r.storeExpireDate, ""))
	}
	if r.desc1 != nil {
		localVarFormParams.Add("Desc_1", parameterToString(*r.desc1, ""))
	}
	if r.desc2 != nil {
		localVarFormParams.Add("Desc_2", parameterToString(*r.desc2, ""))
	}
	if r.desc3 != nil {
		localVarFormParams.Add("Desc_3", parameterToString(*r.desc3, ""))
	}
	if r.desc4 != nil {
		localVarFormParams.Add("Desc_4", parameterToString(*r.desc4, ""))
	}
	if r.paymentInfoURL != nil {
		localVarFormParams.Add("PaymentInfoURL", parameterToString(*r.paymentInfoURL, ""))
	}
	if r.clientRedirectURL != nil {
		localVarFormParams.Add("ClientRedirectURL", parameterToString(*r.clientRedirectURL, ""))
	}
	if r.bindingCard != nil {
		localVarFormParams.Add("BindingCard", parameterToString(*r.bindingCard, ""))
	}
	if r.merchantMemberID != nil {
		localVarFormParams.Add("MerchantMemberID", parameterToString(*r.merchantMemberID, ""))
	}
	if r.redeem != nil {
		localVarFormParams.Add("Redeem", parameterToString(*r.redeem, ""))
	}
	if r.unionPay != nil {
		localVarFormParams.Add("UnionPay", parameterToString(*r.unionPay, ""))
	}
	if r.creditInstallment != nil {
		localVarFormParams.Add("CreditInstallment", parameterToString(*r.creditInstallment, ""))
	}
	if r.periodAmount != nil {
		localVarFormParams.Add("PeriodAmount", parameterToString(*r.periodAmount, ""))
	}
	if r.periodType != nil {
		localVarFormParams.Add("PeriodType", parameterToString(*r.periodType, ""))
	}
	if r.frequency != nil {
		localVarFormParams.Add("Frequency", parameterToString(*r.frequency, ""))
	}
	if r.execTimes != nil {
		localVarFormParams.Add("ExecTimes", parameterToString(*r.execTimes, ""))
	}
	if r.periodReturnURL != nil {
		localVarFormParams.Add("PeriodReturnURL", parameterToString(*r.periodReturnURL, ""))
	}
	if r.relateNumber != nil {
		localVarFormParams.Add("RelateNumber", parameterToString(*r.relateNumber, ""))
	}
	if r.customerID != nil {
		localVarFormParams.Add("CustomerID", parameterToString(*r.customerID, ""))
	}
	if r.customerIdentifier != nil {
		localVarFormParams.Add("CustomerIdentifier", parameterToString(*r.customerIdentifier, ""))
	}
	if r.customerName != nil {
		localVarFormParams.Add("CustomerName", parameterToString(*r.customerName, ""))
	}
	if r.customerAddr != nil {
		localVarFormParams.Add("CustomerAddr", parameterToString(*r.customerAddr, ""))
	}
	if r.customerPhone != nil {
		localVarFormParams.Add("CustomerPhone", parameterToString(*r.customerPhone, ""))
	}
	if r.customerEmail != nil {
		localVarFormParams.Add("CustomerEmail", parameterToString(*r.customerEmail, ""))
	}
	if r.clearanceMark != nil {
		localVarFormParams.Add("ClearanceMark", parameterToString(*r.clearanceMark, ""))
	}
	if r.taxType != nil {
		localVarFormParams.Add("TaxType", parameterToString(*r.taxType, ""))
	}
	if r.carruerType != nil {
		localVarFormParams.Add("CarruerType", parameterToString(*r.carruerType, ""))
	}
	if r.carruerNum != nil {
		localVarFormParams.Add("CarruerNum", parameterToString(*r.carruerNum, ""))
	}
	if r.donation != nil {
		localVarFormParams.Add("Donation", parameterToString(*r.donation, ""))
	}
	if r.loveCode != nil {
		localVarFormParams.Add("LoveCode", parameterToString(*r.loveCode, ""))
	}
	if r.print != nil {
		localVarFormParams.Add("Print", parameterToString(*r.print, ""))
	}
	if r.invoiceItemName != nil {
		localVarFormParams.Add("InvoiceItemName", parameterToString(*r.invoiceItemName, ""))
	}
	if r.invoiceItemCount != nil {
		localVarFormParams.Add("InvoiceItemCount", parameterToString(*r.invoiceItemCount, ""))
	}
	if r.invoiceItemWord != nil {
		localVarFormParams.Add("InvoiceItemWord", parameterToString(*r.invoiceItemWord, ""))
	}
	if r.invoiceItemPrice != nil {
		localVarFormParams.Add("InvoiceItemPrice", parameterToString(*r.invoiceItemPrice, ""))
	}
	if r.invoiceItemTaxType != nil {
		localVarFormParams.Add("InvoiceItemTaxType", parameterToString(*r.invoiceItemTaxType, ""))
	}
	if r.invoiceRemark != nil {
		localVarFormParams.Add("InvoiceRemark", parameterToString(*r.invoiceRemark, ""))
	}
	if r.delayDay != nil {
		localVarFormParams.Add("DelayDay", parameterToString(*r.delayDay, ""))
	}
	if r.invType != nil {
		localVarFormParams.Add("InvType", parameterToString(*r.invType, ""))
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
